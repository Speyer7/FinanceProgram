import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.ticker import FuncFormatter
from openpyxl import load_workbook
import matplotlib.patches as patches
import pylab
import tkinter as tk
import seaborn as sns

year = "2024"

def GetAllKategories_diagram_top_right(year):
    wb = load_workbook("Finanzen" + year + ".xlsx")
    ws = wb["Finanzen"]

    wbGehalt = load_workbook("Gehalt" + year + ".xlsx")
    wsGehalt = wbGehalt["Gehalt"]

    global gehaltAll
    gehaltAll = 0
    for col in range(2, wsGehalt.max_column + 1):
        if col == int("1"):
            col = "A"
        if col == int("2"):
            col = "B"
        if col == int("3"):
            col = "C"
        if col == int("4"):
            col = "D"
        if col == int("5"):
            col = "E"
        if col == int("6"):
            col = "F"
        if col == int("7"):
            col = "G"
        if col == int("8"):
            col = "H"
        if col == int("9"):
            col = "I"
        if col == int("10"):
            col = "J"
        if col == int("11"):
            col = "K"
        if col == int("12"):
            col = "L"
        if col == int("13"):
            col = "M"

        gehaltDieserMonat = 0
        for row in range(2, wsGehalt.max_row + 1):
            print(row)
            gehaltDieserMonat += round(float(wsGehalt[str(col) + str(row)].value), 2)
        print("Gehalt dieser Monat: " + str(gehaltDieserMonat))

        gehaltAll += gehaltDieserMonat
        gehaltAll = round(gehaltAll, 2)
        if str(gehaltDieserMonat) == "0.0":
            print("Gehalt noch nicht eingetragen für den Monat " + str(wsGehalt[str(col) + str(1)].value))
            #showText("Das Gehalt für den Monat " + str(wsGehalt[str(col) + str(
                #1)].value) + " wurde noch nicht eingetragen. Gehe dafür bitte zum Hauptfenster zurück und füge dein Gehalt links unten, unter <Gehalt> hinzu.")
        print("Gehalt all:" + str(gehaltAll))

    global AllKategorienValuesTogether
    AllKategorienValuesTogether = 0

    global KategorienListe
    KategorienListe = []
    global BeträgeListe
    BeträgeListe = []
    for row in range(2, ws.max_row + 1):
        print(row)
        KategorieValue = 0
        KategorienListe.append(ws[str("A") + str(row)].value)
        for col in range(2, ws.max_column + 1):
            print(col)
            if col == int("1"):
                col = "A"
            if col == int("2"):
                col = "B"
            if col == int("3"):
                col = "C"
            if col == int("4"):
                col = "D"
            if col == int("5"):
                col = "E"
            if col == int("6"):
                col = "F"
            if col == int("7"):
                col = "G"
            if col == int("8"):
                col = "H"
            if col == int("9"):
                col = "I"
            if col == int("10"):
                col = "J"
            if col == int("11"):
                col = "K"
            if col == int("12"):
                col = "L"
            if col == int("13"):
                col = "M"
            KategorieValue += float(ws[str(col) + str(row)].value)
        BeträgeListe.append(str(KategorieValue))


        print("MonthValue: " + str(KategorieValue))
        AllKategorienValuesTogether += float(KategorieValue)
        print(round(AllKategorienValuesTogether, 2), f"= round({AllKategorienValuesTogether}, 2)")
        AllKategorienValuesTogether = round(AllKategorienValuesTogether, 2)

    global Relation
    Relation = float(gehaltAll) - float(AllKategorienValuesTogether)
    print(Relation)
    Relation = round(Relation, 2)

    print("All: " + str(AllKategorienValuesTogether))
    print(KategorienListe)
    print(BeträgeListe)
    print(gehaltAll)
    print(Relation)

def plot_kategorien(year):
    GetAllKategories_diagram_top_right(year)  # Ruft Ihre Funktion auf, um die Daten zu erhalten

    # Konvertieren Sie die Beträge in Floats
    betraege = [float(betrag) for betrag in BeträgeListe]

    # Erstellen Sie das Diagramm
    fig, ax = plt.subplots(figsize=(16, 9), facecolor='#f0f0f0')
    ax.set_facecolor('#ffffff')
    fig.canvas.manager.set_window_title('Mein Finanzüberblick ' + str(year))

    # Balkenbreite und Positionen
    bar_width = 0.7
    r = np.arange(len(KategorienListe))

    # Erstellen Sie die Balken
    bars = ax.bar(r, betraege, color='#FF6B6B', width=bar_width, edgecolor='white', linewidth=0.7, alpha=0.8, label="Ausgaben")
    ax.legend(fontsize=14, loc='upper left', frameon=True, facecolor='white', edgecolor='gray')

    # Beschriftungen und Titel
    ax.set_xlabel('Kategorien', fontsize=16, fontweight='bold', labelpad=15)
    ax.set_ylabel('Beträge (€)', fontsize=16, fontweight='bold', labelpad=15)
    ax.set_title(f'Ausgaben aller Kategorien im Jahresverlauf {year}', fontsize=24, fontweight='bold', pad=20)

    # Rotieren Sie die x-Achsen-Beschriftungen für bessere Lesbarkeit
    plt.xticks(r, KategorienListe, rotation=45, ha='right', fontsize=12)

    # Formatieren Sie die y-Achse als Währung
    def currency_formatter(x, p):
        return f"{x:,.2f} €"
    ax.yaxis.set_major_formatter(FuncFormatter(currency_formatter))

    # Fügen Sie Werte über den Balken hinzu
    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height,
                f'{height:,.0f} €',##########################################################Hier mit '2f' die nachkommastellen bearbeiten
                ha='center', va='bottom', fontsize=10, fontweight='bold')

    # Fügen Sie eine Textbox mit Gesamtinformationen hinzu
    props = dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.7, edgecolor='gray')
    info_text = (f"Komplette Einnahmen: {gehaltAll:,.2f} €\n"
                 f"Komplette Ausgaben: {AllKategorienValuesTogether:,.2f} €\n"
                 f"Differenz: {Relation:,.2f} €")
    ax.text(0.992, 0.98, info_text, transform=ax.transAxes, 
            fontsize=14, verticalalignment='top', horizontalalignment='right',
            bbox=props)

    # Fügen Sie ein Gitternetz hinzu
    ax.grid(True, linestyle='--', alpha=0.7, axis='y')

    # Entfernen Sie die obere und rechte Achse
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)

    # Fügen Sie einen Rahmen um den Plotbereich hinzu
    for spine in ax.spines.values():
        spine.set_edgecolor('#CCCCCC')

    # Fügen Sie einen Farbverlauf als Hintergrund hinzu
    gradient = np.linspace(0, 1, 256).reshape(1, -1)
    gradient = np.vstack((gradient, gradient))
    ax.imshow(gradient, extent=[ax.get_xlim()[0], ax.get_xlim()[1], ax.get_ylim()[0], ax.get_ylim()[1]], 
              aspect='auto', alpha=0.1, cmap='coolwarm')

    # Fügen Sie ein Titelfeld hinzu
    title_box = patches.Rectangle((0, 1.02), 1, 0.08, transform=ax.transAxes, fill=True,
                                  facecolor='lightgray', edgecolor='none', alpha=0.8)
    ax.add_patch(title_box)

    # Add a watermark
    fig.text(0.95, 0, 'Jonas Gaiser', fontsize=12, color='gray', ha='right', va='bottom', alpha=0.5)

    # Passen Sie das Layout an
    plt.tight_layout()

    # Zeigen Sie das Diagramm an
    plt.show()

# Verwenden Sie die Funktion
plot_kategorien("2024")